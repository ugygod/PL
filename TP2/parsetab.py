
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftPLUSMINUSleftTIMESDIVIDEleftMAIORMENORASSIGN COLON COMMA COMMENT CONCAT DIVIDE END FUNCTION IDENTIFIER LBRACKET LPAREN MAIOR MENOR MINUS NUMBER PLUS RANDOM RBRACKET READ RPAREN SEMICOLON STRING TIMES WRITEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : assignment SEMICOLON\n                 | write_statement SEMICOLON\n                 | read_statement SEMICOLON\n                 | random_statement SEMICOLON\n                 | function_definition\n                 | function_call SEMICOLONassignment : IDENTIFIER ASSIGN expressionwrite_statement : WRITE LPAREN expression RPARENread_statement : IDENTIFIER ASSIGN READ LPAREN RPARENrandom_statement : IDENTIFIER ASSIGN RANDOM LPAREN NUMBER RPARENfunction_definition : FUNCTION IDENTIFIER LPAREN parameters RPAREN COMMA COLON expression SEMICOLON\n                           | FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON statement_list ENDfunction_call : IDENTIFIER LPAREN arguments RPARENparameters : parameters COMMA IDENTIFIER\n                  | IDENTIFIER\n                  | emptyarguments : arguments COMMA expression\n                 | expression\n                 | emptyexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression CONCAT expression\n                  | expression MAIOR expression\n                  | expression MENOR expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDENTIFIERexpression : STRINGexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n                | expression\n                | emptyempty :'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,8,12,13,14,15,16,17,18,19,20,21,26,30,35,36,37,38,39,40,41,42,50,66,69,73,75,76,78,79,],[10,10,-3,-8,22,-2,-4,-5,-6,-7,-9,23,23,23,23,23,52,23,23,23,23,23,23,23,23,23,74,10,23,10,-15,-14,]),'WRITE':([0,2,3,8,13,14,15,16,17,18,73,76,78,79,],[11,11,-3,-8,-2,-4,-5,-6,-7,-9,11,11,-15,-14,]),'FUNCTION':([0,2,3,8,13,14,15,16,17,18,73,76,78,79,],[12,12,-3,-8,-2,-4,-5,-6,-7,-9,12,12,-15,-14,]),'$end':([1,2,3,8,13,14,15,16,17,18,78,79,],[0,-1,-3,-8,-2,-4,-5,-6,-7,-9,-15,-14,]),'END':([3,8,13,14,15,16,17,18,76,78,79,],[-3,-8,-2,-4,-5,-6,-7,-9,78,-15,-14,]),'SEMICOLON':([4,5,6,7,9,23,24,28,29,49,51,55,56,57,58,59,60,61,62,63,65,70,77,],[14,15,16,17,18,-32,-10,-31,-33,-16,-11,-23,-24,-25,-26,-27,-28,-29,-12,-30,-34,-13,79,]),'ASSIGN':([10,],[19,]),'LPAREN':([10,11,19,20,21,22,25,26,27,30,36,37,38,39,40,41,42,50,66,75,],[20,21,26,26,26,35,43,26,45,26,26,26,26,26,26,26,26,26,26,26,]),'READ':([19,],[25,]),'RANDOM':([19,],[27,]),'NUMBER':([19,20,21,26,30,36,37,38,39,40,41,42,45,50,66,75,],[28,28,28,28,28,28,28,28,28,28,28,28,64,28,28,28,]),'STRING':([19,20,21,26,30,36,37,38,39,40,41,42,50,66,75,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'LBRACKET':([19,20,21,26,30,36,37,38,39,40,41,42,50,66,75,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'RPAREN':([20,23,28,29,31,32,33,34,35,43,44,52,53,54,55,56,57,58,59,60,61,63,64,65,67,74,],[-38,-32,-31,-33,49,-21,-22,51,-38,62,63,-18,68,-19,-23,-24,-25,-26,-27,-28,-29,-30,70,-34,-20,-17,]),'COMMA':([20,23,28,29,30,31,32,33,35,46,47,48,52,53,54,55,56,57,58,59,60,61,63,65,67,68,71,74,],[-38,-32,-31,-33,-38,50,-21,-22,-38,66,-36,-37,-18,69,-19,-23,-24,-25,-26,-27,-28,-29,-30,-34,-20,72,-35,-17,]),'PLUS':([23,24,28,29,32,34,44,47,55,56,57,58,59,60,61,63,65,67,71,77,],[-32,36,-31,-33,36,36,36,36,-23,-24,-25,-26,36,-28,-29,-30,-34,36,36,36,]),'MINUS':([23,24,28,29,32,34,44,47,55,56,57,58,59,60,61,63,65,67,71,77,],[-32,37,-31,-33,37,37,37,37,-23,-24,-25,-26,37,-28,-29,-30,-34,37,37,37,]),'TIMES':([23,24,28,29,32,34,44,47,55,56,57,58,59,60,61,63,65,67,71,77,],[-32,38,-31,-33,38,38,38,38,38,38,-25,-26,38,-28,-29,-30,-34,38,38,38,]),'DIVIDE':([23,24,28,29,32,34,44,47,55,56,57,58,59,60,61,63,65,67,71,77,],[-32,39,-31,-33,39,39,39,39,39,39,-25,-26,39,-28,-29,-30,-34,39,39,39,]),'CONCAT':([23,24,28,29,32,34,44,47,55,56,57,58,59,60,61,63,65,67,71,77,],[-32,40,-31,-33,40,40,40,40,-23,-24,-25,-26,-27,-28,-29,-30,-34,40,40,40,]),'MAIOR':([23,24,28,29,32,34,44,47,55,56,57,58,59,60,61,63,65,67,71,77,],[-32,41,-31,-33,41,41,41,41,41,41,41,41,41,-28,-29,-30,-34,41,41,41,]),'MENOR':([23,24,28,29,32,34,44,47,55,56,57,58,59,60,61,63,65,67,71,77,],[-32,42,-31,-33,42,42,42,42,42,42,42,42,42,-28,-29,-30,-34,42,42,42,]),'RBRACKET':([23,28,29,30,46,47,48,55,56,57,58,59,60,61,63,65,71,],[-32,-31,-33,-38,65,-36,-37,-23,-24,-25,-26,-27,-28,-29,-30,-34,-35,]),'COLON':([68,72,],[73,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,73,],[2,76,]),'statement':([0,2,73,76,],[3,13,3,13,]),'assignment':([0,2,73,76,],[4,4,4,4,]),'write_statement':([0,2,73,76,],[5,5,5,5,]),'read_statement':([0,2,73,76,],[6,6,6,6,]),'random_statement':([0,2,73,76,],[7,7,7,7,]),'function_definition':([0,2,73,76,],[8,8,8,8,]),'function_call':([0,2,73,76,],[9,9,9,9,]),'expression':([19,20,21,26,30,36,37,38,39,40,41,42,50,66,75,],[24,32,34,44,47,55,56,57,58,59,60,61,67,71,77,]),'arguments':([20,],[31,]),'empty':([20,30,35,],[33,48,54,]),'elements':([30,],[46,]),'parameters':([35,],[53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','grammar.py',32),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','grammar.py',36),
  ('statement_list -> statement','statement_list',1,'p_statement_list','grammar.py',37),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','grammar.py',44),
  ('statement -> write_statement SEMICOLON','statement',2,'p_statement','grammar.py',45),
  ('statement -> read_statement SEMICOLON','statement',2,'p_statement','grammar.py',46),
  ('statement -> random_statement SEMICOLON','statement',2,'p_statement','grammar.py',47),
  ('statement -> function_definition','statement',1,'p_statement','grammar.py',48),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','grammar.py',49),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','grammar.py',53),
  ('write_statement -> WRITE LPAREN expression RPAREN','write_statement',4,'p_write_statement','grammar.py',58),
  ('read_statement -> IDENTIFIER ASSIGN READ LPAREN RPAREN','read_statement',5,'p_read_statement','grammar.py',62),
  ('random_statement -> IDENTIFIER ASSIGN RANDOM LPAREN NUMBER RPAREN','random_statement',6,'p_random_statement','grammar.py',68),
  ('function_definition -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COMMA COLON expression SEMICOLON','function_definition',9,'p_function_definition','grammar.py',74),
  ('function_definition -> FUNCTION IDENTIFIER LPAREN parameters RPAREN COLON statement_list END','function_definition',8,'p_function_definition','grammar.py',75),
  ('function_call -> IDENTIFIER LPAREN arguments RPAREN','function_call',4,'p_function_call','grammar.py',84),
  ('parameters -> parameters COMMA IDENTIFIER','parameters',3,'p_parameters','grammar.py',216),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','grammar.py',217),
  ('parameters -> empty','parameters',1,'p_parameters','grammar.py',218),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','grammar.py',227),
  ('arguments -> expression','arguments',1,'p_arguments','grammar.py',228),
  ('arguments -> empty','arguments',1,'p_arguments','grammar.py',229),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','grammar.py',238),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','grammar.py',239),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','grammar.py',240),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','grammar.py',241),
  ('expression -> expression CONCAT expression','expression',3,'p_expression_binop','grammar.py',242),
  ('expression -> expression MAIOR expression','expression',3,'p_expression_binop','grammar.py',243),
  ('expression -> expression MENOR expression','expression',3,'p_expression_binop','grammar.py',244),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','grammar.py',264),
  ('expression -> NUMBER','expression',1,'p_expression_number','grammar.py',268),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','grammar.py',272),
  ('expression -> STRING','expression',1,'p_expression_string','grammar.py',280),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_list','grammar.py',284),
  ('elements -> elements COMMA expression','elements',3,'p_elements','grammar.py',291),
  ('elements -> expression','elements',1,'p_elements','grammar.py',292),
  ('elements -> empty','elements',1,'p_elements','grammar.py',293),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',302),
]
